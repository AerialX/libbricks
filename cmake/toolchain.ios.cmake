set(CMAKE_SYSTEM_NAME Darwin)
set(CMAKE_SYSTEM_VERSION 9)

if(APPLE)
	set(HOST_APPLE true)
endif()

if(CMAKE_GENERATOR STREQUAL "Xcode")
	set(XCODE true)
endif()

if(IOS_SIMULATOR)
	if(HOST_APPLE)
		set(IOS_SDK_PLATFORM "iPhoneSimulator")
	else()
		message(FATAL_ERROR "The Linux toolchain only supports armv6")
	endif()
endif()

if(NOT DEFINED IOS_SDK_ROOT)
	set(IOS_SDK_ROOT $ENV{IOS_SDK_ROOT})
endif()

if(NOT DEFINED IOS_SDK_BINPATH)
	set(IOS_SDK_BINPATH $ENV{IOS_SDK_BINPATH})
endif()

if(NOT DEFINED IOS_SDK_PLATFORM)
	set(IOS_SDK_PLATFORM "iPhoneOS")
endif()

if(NOT EXISTS "${IOS_SDK_ROOT}")
	if(HOST_APPLE)
		set(IOS_SDK_ROOT "/Developer/Platforms/${IOS_SDK_PLATFORM}.platform/Developer/SDKs")
	else()
		message(FATAL_ERROR "You must specify a valid $IOS_SDK_ROOT")
	endif()
endif()

if(NOT EXISTS "${IOS_SDK_BINPATH}")
	if(HOST_APPLE)
		set(IOS_SDK_BINPATH "/Developer/Platforms/${IOS_SDK_PLATFORM}.platform/Developer/usr/bin")
	else()
		message(FATAL_ERROR "You must specify a valid $IOS_SDK_BINPATH")
	endif()
endif()

# TODO: Support clang
if(IOS_SIMULATOR)
	set(IOS_SDK_SUPPORTED_COMPILERS llvm i686-apple-darwin9 i686-apple-darwin10)
else()
	set(IOS_SDK_SUPPORTED_COMPILERS llvm arm-apple-darwin9 arm-apple-darwin10)
endif()
set(IOS_SDK_SUPPORTED_COMPILER_VERSIONS 4.0.1 4.2 4.2.1)
if(NOT DEFINED IOS_SDK_TARGET)
	foreach(ios_compiler ${IOS_SDK_SUPPORTED_COMPILERS})
		foreach(ios_compiler_version ${IOS_SDK_SUPPORTED_COMPILER_VERSIONS})
			if(EXISTS "${IOS_SDK_BINPATH}/${ios_compiler}-gcc-${ios_compiler_version}")
				set(IOS_SDK_TARGET "${ios_compiler}")
				set(IOS_SDK_TARGET_VERSION "${ios_compiler_version}")
			endif()
		endforeach()
	endforeach()
	if(NOT DEFINED IOS_SDK_TARGET)
		message(FATAL_ERROR "Unable to auto-detect gcc version")
	else()
		message(STATUS "Using auto-detected ${IOS_SDK_TARGET}-${IOS_SDK_TARGET_VERSION}")
	endif()
endif()

set(IOS_SDK_SUPPORTED_VERSIONS 5.0 4.3 4.2 4.1 4.0 4.2 4.1.2 3.2 3.1 3.1.2)
if(NOT DEFINED IOS_SDK_VERSION)
	foreach(sdk_version ${IOS_SDK_SUPPORTED_VERSIONS})
		if(EXISTS "${IOS_SDK_ROOT}/${IOS_SDK_PLATFORM}${sdk_version}.sdk")
			set(IOS_SDK_VERSION "${sdk_version}")
			break()
		endif()
	endforeach()
	if(NOT DEFINED IOS_SDK_VERSION)
		message(FATAL_ERROR "Unable to auto-detect iOS SDK version")
	else()
		message(STATUS "Using auto-detected ${IOS_SDK_PLATFORM}${IOS_SDK_VERSION}.sdk")
	endif()
endif()

if(NOT HOST_APPLE)
	set(TOOL_OS_SUFFIX "")
else()
	set(TOOL_OS_SUFFIX "-${IOS_SDK_TARGET_VERSION}")
endif()

if(WIN32)
	set(TOOL_OS_SUFFIX "${TOOL_OS_SUFFIX}.exe")
endif()

set(IOS_SDK_PREFIX "${IOS_SDK_TARGET}-")

if(HOST_APPLE)
	set(TOOL_OS_SUFFIX "")
	set(IOS_SDK_PREFIX "")
	
	set(IOS_SDK_LLVM_GCC true)
endif()

if(IOS_SDK_LLVM_GCC)
	set(CMAKE_C_COMPILER   "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}llvm-gcc${TOOL_OS_SUFFIX}" CACHE PATH "gcc" FORCE)
	set(CMAKE_CXX_COMPILER "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}llvm-g++${TOOL_OS_SUFFIX}" CACHE PATH "g++" FORCE)
	include_directories(SYSTEM "/Developer/Platforms/${IOS_SDK_PLATFORM}.platform/Developer/usr/llvm-gcc-4.2/lib/gcc/${IOS_SDK_TARGET}/${IOS_SDK_TARGET_VERSION}/include")
elseif(IOS_SDK_CLANG)
	set(CMAKE_C_COMPILER   "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}clang${TOOL_OS_SUFFIX}"    CACHE PATH "gcc" FORCE)
	set(CMAKE_CXX_COMPILER "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}clang++${TOOL_OS_SUFFIX}"  CACHE PATH "g++" FORCE)
else()
	set(CMAKE_C_COMPILER   "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}gcc${TOOL_OS_SUFFIX}"      CACHE PATH "gcc" FORCE)
	set(CMAKE_CXX_COMPILER "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}g++${TOOL_OS_SUFFIX}"      CACHE PATH "g++" FORCE)
	include_directories(SYSTEM "${IOS_SDK_SYSROOT}/usr/lib/gcc/${IOS_SDK_TARGET}/${IOS_SDK_TARGET_VERSION}/include")
endif()
set(CMAKE_AR           "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}ar${TOOL_OS_SUFFIX}"      CACHE PATH "archive" FORCE)
set(CMAKE_LINKER       "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}ld${TOOL_OS_SUFFIX}"      CACHE PATH "linker" FORCE)
set(CMAKE_NM           "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}nm${TOOL_OS_SUFFIX}"      CACHE PATH "nm" FORCE)
set(CMAKE_OBJCOPY      "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}objcopy${TOOL_OS_SUFFIX}" CACHE PATH "objcopy" FORCE)
set(CMAKE_OBJDUMP      "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}objdump${TOOL_OS_SUFFIX}" CACHE PATH "objdump" FORCE)
set(CMAKE_STRIP        "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}strip${TOOL_OS_SUFFIX}"   CACHE PATH "strip" FORCE)
set(CMAKE_RANLIB       "${IOS_SDK_BINPATH}/${IOS_SDK_PREFIX}ranlib${TOOL_OS_SUFFIX}"  CACHE PATH "ranlib" FORCE)

set(IOS_SDK_SYSROOT "${IOS_SDK_ROOT}/${IOS_SDK_PLATFORM}${IOS_SDK_VERSION}.sdk")

include_directories(SYSTEM "${IOS_SDK_SYSROOT}/usr/include/c++/${IOS_SDK_TARGET_VERSION}/${IOS_SDK_TARGET}")
include_directories(SYSTEM "${IOS_SDK_SYSROOT}/usr/include/c++/${IOS_SDK_TARGET_VERSION}/armv7-apple-darwin10")

set(LINKER_FLAGS "-L${IOS_SDK_SYSROOT}/usr/lib/gcc/${IOS_SDK_TARGET}/${IOS_SDK_TARGET_VERSION} -L${IOS_SDK_SYSROOT}/usr/lib/system")

set(CMAKE_FIND_ROOT_PATH "${IOS_SDK_SYSROOT}" "${IOS_SDK_BINPATH}")
#set(CMAKE_SYSTEM_FRAMEWORK_PATH "/System/Library/Frameworks")
#set(CMAKE_FIND_FRAMEWORK FIRST)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(COMPILER_FLAGS "-fPIC -D__APPLE__ -fsigned-char")

set(COMPILER_FLAGS "--sysroot=${IOS_SDK_SYSROOT} -F${IOS_SDK_SYSROOT}/System/Library/Frameworks ${COMPILER_FLAGS}")

include(CMakeForceCompiler)
CMAKE_FORCE_C_COMPILER("${CMAKE_C_COMPILER}" GNU)
CMAKE_FORCE_CXX_COMPILER("${CMAKE_CXX_COMPILER}" GNU)

if(HOST_APPLE)
	if(IOS_SIMULATOR)
		set(COMPILER_FLAGS "${COMPILER_FLAGS} -arch i386")
		set(LINKER_FLAGS "${LINKER_FLAGS} -arch i386")
	else()
		set(COMPILER_FLAGS "${COMPILER_FLAGS} -arch armv6 -arch armv7")
		set(LINKER_FLAGS "${LINKER_FLAGS} -arch armv6 -arch armv7")
	endif()
else()
	set(COMPILER_FLAGS "${COMPILER_FLAGS} -march=armv6")
endif()

if(XCODE)
	set(COMPILER_FLAGS "")
	set(LINKER_FLAGS "")
endif()

set(FORCE_ARM OFF CACHE BOOL "Use 32-bit ARM instructions instead of Thumb-1")
if(NOT FORCE_ARM)
	set(COMPILER_FLAGS "${COMPILER_FLAGS} -mthumb")
else()
	set(COMPILER_FLAGS "${COMPILER_FLAGS} -marm")
endif()

#set(LINKER_FLAGS "${LINKER_FLAGS} -lSystem -lgcc -lobjc -lstdc++")

set(CMAKE_CXX_FLAGS "${COMPILER_FLAGS}" CACHE STRING "c++ flags")
set(CMAKE_C_FLAGS "${COMPILER_FLAGS} -std=gnu99" CACHE STRING "c flags")

set(CMAKE_SHARED_LINKER_FLAGS "${LINKER_FLAGS}" CACHE STRING "linker flags" FORCE)
set(CMAKE_MODULE_LINKER_FLAGS "${LINKER_FLAGS}" CACHE STRING "linker flags" FORCE)
set(CMAKE_EXE_LINKER_FLAGS "${LINKER_FLAGS} -ObjC" CACHE STRING "linker flags" FORCE)

set(IOS true)
set(BUILD_IOS true)

MARK_AS_ADVANCED(FORCE_ARM NO_UNDEFINED)
