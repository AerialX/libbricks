cmake_minimum_required(VERSION 2.6)
project(libbricks)

set(BRICKS_VERSION_MAJOR 0)
set(BRICKS_VERSION_MINOR 1)
set(BRICKS_VERSION "0.1")

option(BRICKS_CONFIG_RTTI "Enabled RTTI typeinfo for object.GetClass() and a more helpful GetDebugString()" ON)
option(BRICKS_CONFIG_CPP0X "Enables C++0x features, like lambdas and variadic templates" OFF)
option(BRICKS_CONFIG_LOGGING "Logs various information about libbricks to stderr" OFF)
option(BRICKS_CONFIG_LOGGING_HEAVY "A lot more logging. Requires BRICKS_CONFIG_LOGGING" OFF)
option(BRICKS_CONFIG_LOGGING_MEMLEAK "Report any unreleased objects at program termination. Requires BRICKS_CONFIG_LOGGING" OFF)
option(BRICKS_CONFIG_STL "Use the STL internally in collections" ON)
option(USE_CLANG "Build libbricks with Clang" OFF)

set(BRICKSLIB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/lib/build")
if(IOS)
	if(IOS_SIMULATOR)
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/ios-i386")
	elseif(HOST_APPLE)
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/ios-armv6 ${BRICKSLIB_DIR}/ios-armv7")
	else()
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/ios-armv6")
	endif()
elseif(ANDROID)
	if(X86)
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/android-x86")
	elseif(ARMEABI_V7A)
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/android-armv5")
	else()
		set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/android-armv7")
	endif()
else()
	execute_process(COMMAND echo "echo -n $OSTYPE"
		COMMAND bash
		OUTPUT_VARIABLE OSTYPE)
	set(BRICKSLIB_DIR "${BRICKSLIB_DIR}/${OSTYPE}")
endif()
set(CMAKE_FIND_ROOT_PATH ${BRICKSLIB_DIR} "${CMAKE_FIND_ROOT_PATH}")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

if (IOS)
	set (CMAKE_FIND_LIBRARY_SUFFIXES ".dylib;.a")
endif()
find_package(PNG)
find_package(Freetype)
find_package(LibZip)
find_package(FFMPEG)
find_package(GTest)

option(BRICKS_CONFIG_AUDIO_FFMPEG "Enable the FFMPEG audio decoder" OFF)

if(PNG_FOUND)
	set(BRICKS_CONFIG_IMAGING_LIBPNG ON)
endif()
if(FREETYPE_FOUND)
	set(BRICKS_CONFIG_IMAGING_FREETYPE ON)
endif()
if(LIBZIP_FOUND)
	set(BRICKS_CONFIG_COMPRESSION_LIBZIP ON)
endif()
if(FFMPEG_FOUND)
	set(BRICKS_CONFIG_AUDIO_FFMPEG ON)
endif()

if(USE_CLANG)
	SET(CMAKE_C_COMPILER             "clang")
	SET(CMAKE_C_FLAGS                "-Wall -std=c99")
	SET(CMAKE_C_FLAGS_DEBUG          "-g")
	SET(CMAKE_C_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
	SET(CMAKE_C_FLAGS_RELEASE        "-O3 -DNDEBUG")
	#SET(CMAKE_C_FLAGS_RELEASE        "-O4 -DNDEBUG")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g")

	SET(CMAKE_CXX_COMPILER             "clang++")
	SET(CMAKE_CXX_FLAGS                "-Wall")
	SET(CMAKE_CXX_FLAGS_DEBUG          "-g")
	SET(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
	SET(CMAKE_CXX_FLAGS_RELEASE        "-O3 -DNDEBUG")
	#SET(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

	#SET(CMAKE_AR                       "llvm-ar")
	#SET(CMAKE_LINKER                   "llvm-ld")
	#SET(CMAKE_NM                       "llvm-nm")
	#SET(CMAKE_OBJDUMP                  "llvm-objdump")
	#SET(CMAKE_RANLIB                   "llvm-ranlib")
endif()

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/include/bricks/config.h" ESCAPE_QUOTES)

include_directories("include" "source" "${CMAKE_CURRENT_BINARY_DIR}/include")

set(BRICKS_DEFINITIONS "-Wall")
if (NOT CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
	set(BRICKS_DEFINITIONS "${BRICKS_DEFINITIONS}" PARENT_SCOPE)
	set(BRICKS_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_BINARY_DIR}/include" PARENT_SCOPE)
endif()

add_definitions(${BRICKS_DEFINITIONS})

if(BRICKS_CONFIG_IMAGING_LIBPNG)
	add_definitions(${PNG_DEFINITIONS})
	include_directories(${PNG_INCLUDE_DIR})
endif()

if(BRICKS_CONFIG_IMAGING_FREETYPE)
	include_directories(${FREETYPE_INCLUDE_DIRS})

	# freetype2 may also support bzip2 compressed fonts
	find_package(BZip2)
	if (BZIP2_FOUND)
		set(FREETYPE_LIBRARIES ${FREETYPE_LIBRARIES} ${BZIP2_LIBRARIES})
	endif()
endif()

if(BRICKS_CONFIG_COMPRESSION_LIBZIP)
	include_directories(${LIBZIP_INCLUDE_DIRS})
endif()

if(BRICKS_CONFI_AUDIO_FFMPEG)
	include_directories(${FFMPEG_INCLUDE_DIR})
endif()

add_library(bricks-core "source/exception.cpp" "source/object.cpp" "source/string.cpp")
add_library(bricks-io "source/io/console.cpp" "source/io/filesystem.cpp")
add_library(bricks-threading "source/threading/thread.cpp" "source/threading/threadlocalstorage.cpp")
add_library(bricks-audio "source/audio/midireader.cpp" "source/audio/ffmpegcodec.cpp")
add_library(bricks-compression "source/compression/zipfilesystem.cpp")
add_library(bricks-imaging "source/imaging/colour.cpp" "source/imaging/image.cpp" "source/imaging/bitmap.cpp" "source/imaging/font.cpp" "source/imaging/png.cpp" "source/imaging/freetypefont.cpp")

target_link_libraries(bricks-io bricks-core)
target_link_libraries(bricks-threading bricks-core)
target_link_libraries(bricks-audio bricks-io ${FFMPEG_LIBRARIES})
target_link_libraries(bricks-compression bricks-io ${LIBZIP_LIBRARIES})
target_link_libraries(bricks-imaging bricks-io ${PNG_LIBRARIES} ${FREETYPE_LIBRARIES})

add_executable(sample "sample/source/main.cpp")
target_link_libraries(sample bricks-io bricks-core)

install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include" DESTINATION .)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/include/bricks/config.h" DESTINATION "include/bricks/")
install(TARGETS bricks-core bricks-io bricks-threading bricks-audio bricks-compression DESTINATION lib)

if(GTEST_FOUND)
	add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/test")
endif()
